{"version":3,"sources":["components/Question.tsx","App.tsx","index.tsx"],"names":["Question","questionNumber","question","answers","setAnswer","className","map","q","i","type","name","value","onChange","App","useState","currentQuestion","changeQuestion","quizData","setQuizData","userAnswers","setUserAnswers","gameOver","setGameOver","numOfCorrectAnswers","setNumOfCorrectAnswers","fetchData","a","fetch","method","then","res","json","data","newData","results","forEach","push","correctAnswer","correct_answer","incorrect_answers","sort","Math","random","console","error","useEffect","length","prev","e","allAnswers","slice","target","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb8d1881.chunk.js","sourcesContent":["import React from 'react';\n\ninterface QuestionProps {\n    questionNumber: Number,\n    question: String,\n    answers: Array<string>,\n    setAnswer: (e:any) => void,\n}\n\nfunction Question({questionNumber, question, answers, setAnswer}:QuestionProps):JSX.Element {    \n    return (\n      <div>\n          <div>\n              Question # {questionNumber}\n          </div>\n          <div>\n            {question}\n          </div>\n          <div className='answer-btns'>\n            {answers.map((q, i)=>(\n                <label key={`option-${i}`}>\n                    <input type=\"radio\" name={`question-${questionNumber}`} value={q} onChange={setAnswer} /> \n                    <span>{q}</span>\n                </label>\n            ))\n            }\n          </div>\n      </div>\n    );\n  }\n  \n  export default Question;\n  ","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Question from './components/Question';\n\ninterface Data{\n  answers: Array<string>,\n  correctAnswer: String,\n  question: String,\n}\n\nfunction App() {\n  const [currentQuestion, changeQuestion] = useState<number>(1);\n  const [quizData, setQuizData] = useState<Array<Data>>([]);\n  const [userAnswers, setUserAnswers] = useState<Array<string>>([]);\n\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [numOfCorrectAnswers, setNumOfCorrectAnswers] = useState<number>(0);\n\n  const startOver = ():void => {\n    setGameOver(false);\n    changeQuestion(1);\n    setUserAnswers([]);\n    setNumOfCorrectAnswers(0);\n    fetchData();\n  }\n\n  const fetchData = async () => {\n    try {\n      await fetch(\"https://opentdb.com/api.php?amount=5&category=22&difficulty=easy\", {\n        method: 'GET',\n      })\n      .then(res => res.json())\n      .then((data) => {\n        const newData: Array<Data>= [];\n\n        data.results.forEach((q: any) => {\n          newData.push({\n            correctAnswer: q?.correct_answer,\n            answers: [...q?.incorrect_answers, q?.correct_answer].sort().sort( () => .5 - Math.random() ),\n            question: q?.question,\n          })\n        });\n        setQuizData(newData)\n      })\n    } catch (er) {\n      console.error(er);\n    }\n  }\n\n  // useEffect(() => {\n  //   console.log('userAnswers',userAnswers);\n  //   console.log('quizData',quizData);\n  // }, [quizData, userAnswers]);\n\n  useEffect(() => {\n    if (gameOver){\n      for (let i = 0; i < quizData.length; i++) {\n        if(quizData[i].correctAnswer===userAnswers[i]){\n          setNumOfCorrectAnswers(prev => prev+1);\n        }\n      }\n    }\n  }, [gameOver]);\n\n  const setAnswer = (e: any) => {\n    const allAnswers:Array<string> = userAnswers.slice();\n    allAnswers[currentQuestion-1] = e.target.value;\n    setUserAnswers(allAnswers)\n  }  \n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {quizData && quizData.length && !gameOver ?\n        <div>\n          <Question \n            questionNumber={currentQuestion} \n            question={quizData[currentQuestion-1].question} \n            answers={quizData[currentQuestion-1].answers}\n            setAnswer={setAnswer}\n          />\n          <div>\n            -----------------------\n          </div>\n          <div className='next-prev-q-btns'>\n            {currentQuestion >= 2 && <button onClick={()=>changeQuestion(currentQuestion-1)}>Previous Question</button>}\n            {currentQuestion <= quizData.length-1 && <button onClick={()=>changeQuestion(currentQuestion+1)}>Next Question</button>}\n            {userAnswers.length === quizData.length && <button onClick={()=>setGameOver(true)}>Finish</button>}\n          </div>\n        </div>\n        : gameOver ? null : <div>Loading...</div>\n        }\n\n        {gameOver && \n          <div>\n            <div>\n              You got {numOfCorrectAnswers} out of {quizData.length} correct!\n            </div>\n            <div>\n              {quizData.map((q,i)=>\n                <div key={`q-${i}`} className='answers'>\n                  <div>Question:{q.question}</div>\n                  <div>Correct answer:{q.correctAnswer}</div>\n                  <div>User answer: {userAnswers[i]}</div>\n                </div>\n              )}\n            </div>\n            <button onClick={startOver} className='start-over-btn'>Start over</button>\n          </div>\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}